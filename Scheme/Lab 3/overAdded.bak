#lang racket

(define overAdded
  (lambda (A L)
    (cond ( (= (length L) 0)              0            )
          ( (= (length L) 1) (if (= (car L) A) (length L) 0) )
          ( (= (length L) 2) (if (= A (car L)) (length L) (overAdded (A (cdr L)) ) ))
          ( (= (car L) A) (cons (car L) (overAdded (A (cdr L)) ) ))
          ( #t (overAdded (A (cdr L)) ) )
          )))
          